
//! Autogenerated weights for `liganite_games`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-04-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `kalan-x1x`, CPU: `12th Gen Intel(R) Core(TM) i7-12800H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/production/wbuild/liganite-runtime/liganite_runtime.compact.compressed.wasm
// --pallet
// liganite_games
// --extrinsic
// *
// --output
// ./runtime/src/weights/liganite_games.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `liganite_games`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> liganite_games::WeightInfo for WeightInfo<T> {
	/// Storage: `Publish::Publishers` (r:1 w:0)
	/// Proof: `Publish::Publishers` (`max_values`: None, `max_size`: Some(300), added: 2775, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublishedGames` (r:1 w:1)
	/// Proof: `Games::PublishedGames` (`max_values`: None, `max_size`: Some(376), added: 2851, mode: `MaxEncodedLen`)
	/// Storage: `Games::Tags` (r:20 w:0)
	/// Proof: `Games::Tags` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[1, 128]`.
	/// The range of component `b` is `[0, 20]`.
	fn game_add(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471 + b * (249 ±0)`
		//  Estimated: `3841 + b * (2544 ±0)`
		// Minimum execution time: 15_315_000 picoseconds.
		Weight::from_parts(20_116_733, 0)
			.saturating_add(Weight::from_parts(0, 3841))
			// Standard Error: 8_019
			.saturating_add(Weight::from_parts(95_095, 0).saturating_mul(a.into()))
			// Standard Error: 49_749
			.saturating_add(Weight::from_parts(4_063_867, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2544).saturating_mul(b.into()))
	}
	/// Storage: `Games::BuyerOrders` (r:1 w:0)
	/// Proof: `Games::BuyerOrders` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `Games::OwnedGames` (r:1 w:1)
	/// Proof: `Games::OwnedGames` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublishedGames` (r:1 w:0)
	/// Proof: `Games::PublishedGames` (`max_values`: None, `max_size`: Some(376), added: 2851, mode: `MaxEncodedLen`)
	fn buy_free() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `3841`
		// Minimum execution time: 14_706_000 picoseconds.
		Weight::from_parts(15_596_000, 0)
			.saturating_add(Weight::from_parts(0, 3841))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Games::BuyerOrders` (r:1 w:0)
	/// Proof: `Games::BuyerOrders` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `Games::OwnedGames` (r:1 w:1)
	/// Proof: `Games::OwnedGames` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublishedGames` (r:1 w:0)
	/// Proof: `Games::PublishedGames` (`max_values`: None, `max_size`: Some(376), added: 2851, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn buy_instant() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `450`
		//  Estimated: `3841`
		// Minimum execution time: 42_997_000 picoseconds.
		Weight::from_parts(44_230_000, 0)
			.saturating_add(Weight::from_parts(0, 3841))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Games::BuyerOrders` (r:1 w:1)
	/// Proof: `Games::BuyerOrders` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `Games::OwnedGames` (r:1 w:0)
	/// Proof: `Games::OwnedGames` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublishedGames` (r:1 w:0)
	/// Proof: `Games::PublishedGames` (`max_values`: None, `max_size`: Some(376), added: 2851, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublisherOrders` (r:0 w:1)
	/// Proof: `Games::PublisherOrders` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	fn order_place() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `3841`
		// Minimum execution time: 43_033_000 picoseconds.
		Weight::from_parts(43_943_000, 0)
			.saturating_add(Weight::from_parts(0, 3841))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Games::BuyerOrders` (r:1 w:1)
	/// Proof: `Games::BuyerOrders` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublisherOrders` (r:0 w:1)
	/// Proof: `Games::PublisherOrders` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	fn order_cancel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259`
		//  Estimated: `3571`
		// Minimum execution time: 24_603_000 picoseconds.
		Weight::from_parts(25_320_000, 0)
			.saturating_add(Weight::from_parts(0, 3571))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Games::BuyerOrders` (r:1 w:1)
	/// Proof: `Games::BuyerOrders` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Games::OwnedGames` (r:0 w:1)
	/// Proof: `Games::OwnedGames` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublisherOrders` (r:0 w:1)
	/// Proof: `Games::PublisherOrders` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	fn order_fulfill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259`
		//  Estimated: `3593`
		// Minimum execution time: 29_785_000 picoseconds.
		Weight::from_parts(30_726_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(5))
	}
}
