
//! Autogenerated weights for `liganite_publish`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-04-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `kalan-x1x`, CPU: `12th Gen Intel(R) Core(TM) i7-12800H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/production/wbuild/liganite-runtime/liganite_runtime.compact.compressed.wasm
// --pallet
// liganite_publish
// --extrinsic
// *
// --output
// ./runtime/src/weights/liganite_publish.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `liganite_publish`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> liganite_publish::WeightInfo for WeightInfo<T> {
	/// Storage: `Publish::PublisherDeposit` (r:0 w:1)
	/// Proof: `Publish::PublisherDeposit` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn deposit_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_610_000 picoseconds.
		Weight::from_parts(3_794_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Publish::Publishers` (r:1 w:1)
	/// Proof: `Publish::Publishers` (`max_values`: None, `max_size`: Some(300), added: 2775, mode: `MaxEncodedLen`)
	/// Storage: `Publish::PublisherDeposit` (r:1 w:0)
	/// Proof: `Publish::PublisherDeposit` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[1, 128]`.
	/// The range of component `b` is `[8, 128]`.
	fn publisher_register(_a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `45`
		//  Estimated: `3765`
		// Minimum execution time: 36_963_000 picoseconds.
		Weight::from_parts(40_480_429, 0)
			.saturating_add(Weight::from_parts(0, 3765))
			// Standard Error: 796
			.saturating_add(Weight::from_parts(785, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
